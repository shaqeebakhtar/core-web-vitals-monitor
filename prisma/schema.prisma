generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  analyses  Analysis[]
  monitors  Monitor[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Analysis {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url       String
  device    String
  fetchedAt DateTime
  metrics   String
  scores    String
  report    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Monitor {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  url            String
  device         String
  schedule       Schedule
  latestMetrics  String?
  latestScores   String?
  lastFetchedAt  DateTime?
  scoresHistory  String?
  metricsHistory String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Schedule {
  daily
  hourly
}
